#!/bin/bash

CONFIG_FILE="./.g+++_config"

UNAME_S=$(uname -s)

CXX="g++"
# На MacOS g++ - алиас на clang но флаги для него также применимы

# Флаги Деда (для дебага) под каждую ОС
if [[ "$UNAME_S" == *"NT"* ]]; then
    CXXFLAGS_OS="-Wshadow -Winit-self -Wredundant-decls -Wcast-align -Wundef -Wfloat-equal -Winline \
        -Wunreachable-code -Wmissing-declarations -Wmissing-include-dirs -Wswitch-enum -Wswitch-default \
        -Weffc++ -Wmain -Wextra -Wall -g -pipe -fexceptions -Wcast-qual -Wconversion -Wctor-dtor-privacy \
        -Wempty-body -Wformat-security -Wformat=2 -Wignored-qualifiers -Wlogical-op \
        -Wno-missing-field-initializers -Wnon-virtual-dtor -Woverloaded-virtual -Wpointer-arith -Wsign-promo \
        -Wstack-usage=8192 -Wstrict-aliasing -Wstrict-null-sentinel -Wtype-limits -Wwrite-strings -Werror=vla \
        -D_DEBUG -D_EJUDGE_CLIENT_SIDE"
    CXXFLAGS_ARCH=""
elif [[ "$UNAME_S" == "Linux" ]]; then
    CXXFLAGS_OS="-D_DEBUG -ggdb3 -std=c++17 -O0 -Wall -Wextra -Weffc++ -Waggressive-loop-optimizations \
        -Wc++14-compat -Wmissing-declarations -Wcast-align -Wcast-qual -Wchar-subscripts -Wconditionally-supported \
        -Wconversion -Wctor-dtor-privacy -Wempty-body -Wfloat-equal -Wformat-nonliteral -Wformat-security \
        -Wformat-signedness -Wformat=2 -Winline -Wlogical-op -Wnon-virtual-dtor -Wopenmp-simd -Woverloaded-virtual \
        -Wpacked -Wpointer-arith -Winit-self -Wredundant-decls -Wshadow -Wsign-conversion -Wsign-promo \
        -Wstrict-null-sentinel -Wstrict-overflow=2 -Wsuggest-attribute=noreturn -Wsuggest-final-methods \
        -Wsuggest-final-types -Wsuggest-override -Wswitch-default -Wswitch-enum -Wsync-nand -Wundef \
        -Wunreachable-code -Wunused -Wuseless-cast -Wvariadic-macros -Wno-literal-suffix -Wno-missing-field-initializers \
        -Wno-narrowing -Wno-old-style-cast -Wno-varargs -Wstack-protector -fcheck-new -fsized-deallocation \
        -fstack-protector -fstrict-overflow -flto-odr-type-merging -fno-omit-frame-pointer -Wlarger-than=8192 \
        -Wstack-usage=8192 -pie -fPIE -Werror=vla \
        -fsanitize=address,alignment,bool,bounds,enum,float-cast-overflow,float-divide-by-zero,\
integer-divide-by-zero,leak,nonnull-attribute,null,object-size,return,returns-nonnull-attribute,\
shift,signed-integer-overflow,undefined,unreachable,vla-bound,vptr"
    CXXFLAGS_ARCH="-pthread"
elif [[ "$UNAME_S" == "Darwin" ]]; then
    CXXFLAGS_OS="-D_DEBUG -ggdb3 -std=c++17 -O0 -Wall -Wextra -Weffc++ -Wc++14-compat -Wmissing-declarations \
        -Wcast-align -Wcast-qual -Wchar-subscripts -Wconversion -Wctor-dtor-privacy -Wempty-body -Wfloat-equal \
        -Wformat-nonliteral -Wformat-security -Wformat-signedness -Wformat=2 -Winline -Wnon-virtual-dtor \
        -Woverloaded-virtual -Wpacked -Wpointer-arith -Winit-self -Wredundant-decls -Wshadow -Wsign-conversion \
        -Wsign-promo -Wstrict-overflow=2 -Wsuggest-override -Wswitch-default -Wswitch-enum -Wundef \
        -Wunreachable-code -Wunused -Wvariadic-macros -Wno-missing-field-initializers -Wno-narrowing \
        -Wno-old-style-cast -Wno-varargs -Wstack-protector -fcheck-new -fsized-deallocation -fstack-protector \
        -fstrict-overflow -fno-omit-frame-pointer -Wlarger-than=8192 -fPIE -Werror=vla \
        -fsanitize=address,alignment,bool,bounds,enum,float-cast-overflow,float-divide-by-zero,integer-divide-by-zero,nonnull-attribute,null,return,returns-nonnull-attribute,shift,signed-integer-overflow,undefined,unreachable,vla-bound,vptr"
    CXXFLAGS_ARCH="-pthread"
else
    echo "Unsupported OS: $UNAME_S" >&2
    exit 1
fi

CXXFLAGS_BASE="$CXXFLAGS_OS $CXXFLAGS_ARCH"

save_config() {
    > "$CONFIG_FILE" # Очистить конфиг
    for src in "${SOURCES[@]}"; do
        echo "source:$src" >> "$CONFIG_FILE"
    done
    for hdr in "${HEADERS[@]}"; do
        echo "header:$hdr" >> "$CONFIG_FILE"
    done
    echo "output:$OUTPUT" >> "$CONFIG_FILE"
    # Сохраняем EXTRA_FLAGS (по одной записи на строку)
    for flag in "${EXTRA_FLAGS[@]}"; do
        echo "extra_flag:$flag" >> "$CONFIG_FILE"
    done
    echo "Configuration saved to $CONFIG_FILE"
}

perform_clean() {
    if [[ -f "$CONFIG_FILE" ]]; then
        # Читаем output из конфига иначе a.out (как дефолтный)
        OUTPUT=$(awk -F: '/^output:/ {print $2}' "$CONFIG_FILE" 2>/dev/null) || OUTPUT="a.out"
        SOURCES=()
        while IFS= read -r line; do
            if [[ "$line" == source:* ]]; then
                SOURCES+=("${line#source:}")
            fi
        done < "$CONFIG_FILE"
    else
        OUTPUT="a.out"
        SOURCES=()
        # Если нет конфига, попробуем удалить a.out и все .o в текущей директории
        shopt -s nullglob
        SOURCES=(*.cpp)
        shopt -u nullglob
    fi

	# Удаляем выходной файл
    [[ -f "$OUTPUT" ]] && { rm -f "$OUTPUT"; echo "Removed: $OUTPUT"; }

	# Удаляем объкетные файлы
    for src in "${SOURCES[@]}"; do
        obj="${src%.cpp}.o"
        [[ -f "$obj" ]] && { rm -f "$obj"; echo "Removed: $obj"; }
    done

    # Удаляем .dSYM (дебаг на macos)
    [[ -d "${OUTPUT}.dSYM" ]] && { rm -rf "${OUTPUT}.dSYM"; echo "Removed: ${OUTPUT}.dSYM"; }

    # Удаляем конфиг
    [[ -f "$CONFIG_FILE" ]] && { rm -f "$CONFIG_FILE"; echo "Removed: $CONFIG_FILE"; }

    echo "Clean complete."
    exit 0
}

# Парсинг отчистки (если запрошена отчиста, остальные аргументы не анализируются)
for arg in "$@"; do
    if [[ "$arg" == "-c" || "$arg" == "--clean" ]]; then
        perform_clean
    fi
done

# Смотри в конфиг если есть и нет аргументов командной строки
if [[ $# -eq 0 ]] && [[ -f "$CONFIG_FILE" ]]; then
    echo "No arguments provided. Loading last configuration from $CONFIG_FILE..."
    SOURCES=()
    HEADERS=()
    EXTRA_FLAGS=()
    OUTPUT="a.out"

    while IFS= read -r line; do
        if [[ "$line" == source:* ]]; then
            SOURCES+=("${line#source:}")
        elif [[ "$line" == header:* ]]; then
            HEADERS+=("${line#header:}")
        elif [[ "$line" == output:* ]]; then
            OUTPUT="${line#output:}"
        elif [[ "$line" == extra_flag:* ]]; then
            EXTRA_FLAGS+=("${line#extra_flag:}")
        fi
    done < "$CONFIG_FILE"

    if [[ ${#SOURCES[@]} -eq 0 ]]; then
        echo "Error: Config file is corrupted or empty." >&2
        exit 1
    fi
else
    # Если есть аргументы, то парсим их
    SOURCES=()
    HEADERS=()
    EXTRA_FLAGS=()
    OUTPUT="a.out"

    i=1
    while [[ $i -le $# ]]; do
        arg="${!i}"
        if [[ "$arg" == "-o" ]]; then
            ((i++))
            OUTPUT="${!i}"
        elif [[ "$arg" == *.cpp ]]; then
            SOURCES+=("$arg")
        elif [[ "$arg" == *.h ]]; then
            HEADERS+=("$arg")
        else
            EXTRA_FLAGS+=("$arg")
        fi
        ((i++))
    done

    # Если нет cpp то пробуем main
    if [[ ${#SOURCES[@]} -eq 0 ]]; then
        if [[ -f "main.cpp" ]]; then
            SOURCES=("main.cpp")
            echo "No source files provided. Using main.cpp by default."
        else
            echo "Error: No source files provided and main.cpp not found." >&2
            exit 1
        fi
    fi

    # Сохраняем конфиг, потому что он используется для запуска --clean
    save_config
fi

# Добавляем -I чтобы подгрузились headerы
INCLUDE_DIRS=()
for h in "${HEADERS[@]}"; do
    dir=$(dirname "$h")
    if [[ "$dir" != "." ]] && [[ ! " ${INCLUDE_DIRS[@]} " =~ " $dir " ]]; then
        INCLUDE_DIRS+=("$dir")
        EXTRA_FLAGS+=("-I$dir")
    fi
done

# Проверяем, что есть что компилировать
if [[ ${#SOURCES[@]} -eq 0 ]]; then
    echo "Error: No source files to compile." >&2
    exit 1
fi

# команда = базовые флаги + extra флаги + исходники + -o
CMD=("$CXX" $CXXFLAGS_BASE "${EXTRA_FLAGS[@]}" "${SOURCES[@]}" -o "$OUTPUT")

echo "Compiling: ${SOURCES[*]}"
echo "Includes : ${INCLUDE_DIRS[*]:-none}"
echo "Output   : $OUTPUT"
echo "Extra flags: ${EXTRA_FLAGS[*]:-none}"
echo "Command  : ${CMD[*]}"

# Запускаем
"${CMD[@]}"

# Проверяем результат исполнения
if [[ $? -eq 0 ]]; then
    echo "Compilation successful: $OUTPUT"
else
    echo "Compilation failed."
    exit 1
fi
